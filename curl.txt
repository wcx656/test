<?php
namespace Miaoshou\MallApi;
class MallSDK
{
    protected static $_instance = null;

    protected $url    = null;
    protected $params = null;
    protected $result = null;

    protected $secret  = '25c846b3492f47b4da144cdf89437ab7';

    protected $os      = 'mall_wap';

    protected $udid    = '11111111111111111-AAA';

    protected $version = '1.0.3';

    protected $domain  = null;


    protected function __construct() 
    {
        $this->domain = MALL_API_URL;
    }

    /**
     * 单例
     * @return static object
     */
    public static function getInstance()
    {
        if (static::$_instance === null) {
            return new static;
        }
        return static::$_instance;
    } 

    /**
     * 产生token验证，修饰请求url
     * @param  static::const $apiUri api constat uri
     * @return string        $url    请求地址
     */
    protected function token($apiUri)
    {
        $os      = $this->os;
        $udid    = $this->udid;
        $version = $this->version;
        $time    = time();
        $secret  = $this->secret;
        $sign    = md5($os.$udid.$version.$time.$secret);

        $params = compact('os', 'udid', 'version', 'time', 'sign');
        return sprintf('%s%s?%s', $this->domain, $apiUri, http_build_query($params));
    }

    public function getDomain()
    {
        return $this->domain;
    }

    /**
     * curl $params为空则get方式调用,$params不空为POST调用
     * @param string $url  $params post数据
     * 
     * curl errorno 
     * http://curl.haxx.se/libcurl/c/libcurl-errors.html
     */
    protected  function curl($url = '', $params = [], $timeout=10) {
        $this->url    = $url;
        $this->params = $params;
        $this->result = null;

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        if(!empty($params)) {
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));
        }
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);
        curl_setopt($ch, CURLOPT_DNS_USE_GLOBAL_CACHE, FALSE);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $this->result = curl_exec($ch);

        if(curl_errno($ch)) {
            $this->curlError(curl_error($ch), curl_errno($ch));
        }
        curl_close($ch);
        $this->logger();

        return json_decode($this->result, true);
    }

    /**
     * curl 错误处理
     * @param   $e 
     */
    public function curlError($errCode, $errMsg)
    {
        $errors = sprintf(
            "cURL Error:\nCode: %s\nMessage: %s\n", 
            $errCode,
            $errMsg 
        );
        $this->log($errors,true);
    }

    /**
     * 记录请求日志
     */
    protected function logger()
    {
        $logs = sprintf(
            "cURL Result:\nUrl: %s\nParams: %s\nResult: %s\n\n", 
            $this->url,
            json_encode(
                $this->params, 
                JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES|JSON_UNESCAPED_UNICODE
            ),
            $this->result
        );
        return $this->log($logs);
    }

    /**
     * 记录查询日志，按需重载
     * @param  string $message 
     * @param  int    $code 
     */
    protected function log($logMessage,$flag=false)
    {
        if (MALL_RUNNING_ENV != 'product'||$flag) {
            $logFormat   = "[%s] - %s\n";
            $logFileName = 'mallSDK-' . date('Y-m-d') . '.log';
            $logFile     = APPS_BASE_DIR.DIRECTORY_SEPARATOR.'Logs'.DIRECTORY_SEPARATOR. $logFileName;
            $logMessage  = sprintf($logFormat, date('Y-m-d H:i:s'), $logMessage);

            return file_put_contents($logFile, $logMessage, FILE_APPEND);
        }
    }


}
